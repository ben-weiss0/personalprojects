package imageprocessor.controller.commanddesign.filemanipulation.savefiletypes;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import javax.imageio.ImageIO;

import imageprocessor.controller.commanddesign.filemanipulation.fileconversion.BMPFileConversion;
import imageprocessor.controller.commanddesign.filemanipulation.fileconversion.FileImageConversion;
import imageprocessor.model.IImage;
import imageprocessor.model.IPixel;
import imageprocessor.model.ImageProcessingModel;

/**
 * Represents an {@code AbstractFileSave} with a file, reference, and extension, which allows for
 * saving a file locally on the client's computer.
 */
public abstract class AbstractFileSave extends NewAbstractSave implements FileSave{
  protected String reference;
  // Protected constructor for an AbstractFileSave, which clients should not have access to
  public AbstractFileSave(String file, String reference) {
    super(file);
    this.reference = reference;
  }

  @Override
  public void apply(ImageProcessingModel model) {
    this.go(model.getImageFrom(reference));
  }

  protected abstract FileImageConversion getConverter();
}
